{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "Mcomp",
	"patterns": [
		{
			"include": "#comments-inline"
		},
		{
			"include": "#comments-block"
		},
		{
			"include": "#keywords"
		},
		{
			"include": "#types"
		},
		{
			"include": "#constants"
		},
		{
			"include": "#operators"
		},
		{
			"include": "#strings"
		},
		{
			"include": "#chars"
		},
		{
			"include": "#numbers"
		},
		{
			"include": "#brackets"
		},
		{
			"include": "#punctuation"
		},
		{
			"include": "#identifiers"
		},
		{
			"include": "#identifiers-function"
		}
	],
	"repository": {
		"comments-inline": {
			"patterns": [
				{
					"name": "comment.line.double-slash.mcomp",
					"match": "//.*$"
				}
			]
		},
		"comments-block": {
			"patterns": [
				{
					"name": "comment.block.mcomp",
					"begin": "/\\*",
					"end": "\\*/",
					"patterns": [
						{
							"include": "#comments-inline"
						}
					]
				}
			]
		},
		"keywords": {
			"patterns": [
				{
					"name": "keyword.control.mcomp",
					"match": "\\b(?:component|connect|provides|uses|interface|component|connect|if|else|do|while|for|return|continue|def|var)\\b"
				}
			]
		},
		"types": {
			"patterns": [
				{
					"name": "storage.type.mcomp",
					"match": "\\b(?:int|bool|void|float|double|char|string)\\b"
				}
			]
		},
		"constants": {
			"patterns": [
				{
					"name": "constant.language.mcomp",
					"match": "\\b(?:true|false)\\b"
				}
			]
		},
		"operators": {
			"patterns": [
				{
					"name": "keyword.operator.mcomp",
					"match": "\\b(?:&&|\\|\\||!|==|!=|<|<=|>|>=|\\+|-|\\*|/|%|\\+\\+|--)\\b"
				}
			]
		},
		"strings": {
			"patterns": [
				{
					"name": "string.quoted.double.mcomp",
					"begin": "\"",
					"end": "\"",
					"patterns": [
						{
							"name": "constant.character.escape.mcomp",
							"match": "\\\\."
						}
					]
				}
			]
		},
		"chars": {
			"patterns": [
				{
					"name": "string.quoted.single.mcomp",
					"begin": "'",
					"end": "'",
					"patterns": [
						{
							"name": "constant.character.escape.mcomp",
							"match": "\\\\."
						}
					]
				}
			]
		},
		"numbers": {
			"patterns": [
				{
					"name": "constant.numeric.mcomp",
					"match": "\\b\\d+(\\.\\d+)?([eE][+-]?\\d+)?\\b"
				}
			]
		},
		"brackets": {
			"patterns": [
				{
					"name": "punctuation.definition.bracket.round.mcomp",
					"match": "[\\(\\)]"
				},
				{
					"name": "punctuation.definition.bracket.square.mcomp",
					"match": "[\\[\\]]"
				},
				{
					"name": "punctuation.definition.bracket.curly.mcomp",
					"match": "[\\{\\}]"
				}
			]
		},
		"punctuation": {
			"patterns": [
				{
					"name": "punctuation.separator.mcomp",
					"match": "[,;]"
				},
				{
					"name": "punctuation.terminator.mcomp",
					"match": "[.]"
				}
			]
		},

		"identifiers-function": {
			"patterns": [
				{
					"name": "entity.name.function.mcomp",
					"match": "\\b[a-zA-Z_][a-zA-Z0-9_]*\\b(?=\\s*\\()"
				}
			]
		},

		"identifiers": {
			"patterns": [
				{
					"name": "variable.other.mcomp",
					"match": "\\b[a-zA-Z_][a-zA-Z0-9_]*\\b"
				}
			]
		}

	},
	"scopeName": "source.mc"
}